#include "../Cordic.h"

#include <cmath>
#include <cstdio>
#include <vector>

using namespace	std;


static double const	TWO_PI				= 6.28318530717958647692529;
static double const	UNITS_PER_CIRCLE	= TWO_PI;   // radians. degrees would be 360
static double const	UNITS_FACTOR		= UNITS_PER_CIRCLE / TWO_PI;


int main( int argc, char ** argv )
{
	printf( "// This code is generated by TableGenerator.exe\n" );
	printf( "//\n" );
	printf( "// Fixed point format: %d.%d\n", Cordic::Fixed::SIZE-Cordic::Fixed::PRECISION, Cordic::Fixed::PRECISION );
	printf( "// Units: %f (6.283185 is radians, 360 is degrees)\n", UNITS_PER_CIRCLE );
	printf( "\n" );

	// Make sure the values will fit in the chosen fixed point format

	if ( UNITS_PER_CIRCLE / 8 >= ( Cordic::Fixed::ValueType(1) << ( Cordic::Fixed::SIZE-Cordic::Fixed::PRECISION-1 ) ) )
	{
		fprintf( stderr, "The values are too large to fit in the fixed point format.\n");
		exit( 1 );
	}

	// Build a table of angles until the value is an entry is 0

	vector< int >	angles;
	int				i =		0;

	while ( true )
	{
		double			a	= atan( pow( 2.0, -i ) ) * UNITS_FACTOR;
		Cordic::Fixed	fixed_a( a );

		if ( fixed_a.m_value <= 0 )
		{
			break;
		}

		angles.push_back( fixed_a.m_value );
		++i;
	}

	printf( "int const\tNUMBER_OF_ITERATIONS\t= %d;\n", angles.size() );
	printf( "Cordic::Fixed const\tangles[ NUMBER_OF_ITERATIONS ] =\n" );
	printf( "{\n" );

	for ( size_t i = 0; i < angles.size(); ++i )
	{
		printf( "\tCordic::Fixed( 0, %9d ),\t// atan( pow( 2, %3d ) )\n", angles[i], -int(i) );
	}
	printf( "};\n" );
	printf( "\n" );

	double	K	= 1.0;
	for ( size_t i = 0; i < angles.size(); ++i )
	{
		double	Ki	= sqrt( 1.0 + pow( 4.0, -int(i) ) );

		K *= Ki;
	}

	Cordic::Fixed		fixed_c( 1.0/K );

	printf( "static Cordic::Fixed const	C( 0, %d );\t// %f \n", fixed_c.m_value, float(1.0/K) );
}